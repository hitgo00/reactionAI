{"id":"LwKt","dependencies":[{"name":"/Users/hitgo/Desktop/Projects/hand-gesture/node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js.map","includedInParent":true,"mtime":1599767831120},{"name":"/Users/hitgo/Desktop/Projects/hand-gesture/node_modules/@tensorflow/tfjs-backend-webgl/src/fft_gpu.ts","includedInParent":true,"mtime":1599767831120},{"name":"/Users/hitgo/Desktop/Projects/hand-gesture/package.json","includedInParent":true,"mtime":1599767774914},{"name":"/Users/hitgo/Desktop/Projects/hand-gesture/.babelrc","includedInParent":true,"mtime":1599767774914},{"name":"/Users/hitgo/Desktop/Projects/hand-gesture/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1599767831120}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.FFTProgram=exports.COMPLEX_FFT=void 0;const t={REAL:\"return real * expR - imag * expI;\",IMAG:\"return real * expI + imag * expR;\"};exports.COMPLEX_FFT=t;class e{constructor(t,e,n){this.variableNames=[\"real\",\"imag\"];const o=e[1];this.outputShape=e;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=n?`${o}.0`:\"1.0\";this.userCode=`\\n      const float exponentMultiplier = ${a};\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        ${t}\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(${o});\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < ${o}; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / ${i};\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    `}}exports.FFTProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":0}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":13}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":20}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":35}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":43}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":56}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":57}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":64}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":68}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":76}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":87}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":95}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":112}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":7},"generated":{"line":1,"column":114}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":120}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":27},"generated":{"line":1,"column":122}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":123}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":21,"column":8},"generated":{"line":1,"column":128}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":164}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":22,"column":8},"generated":{"line":1,"column":169}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":206}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":214}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":226}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":6},"generated":{"line":1,"column":228}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":13},"generated":{"line":1,"column":234}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":1,"column":236}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":30,"column":14},"generated":{"line":1,"column":248}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":30,"column":26},"generated":{"line":1,"column":250}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":30,"column":56},"generated":{"line":1,"column":252}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":1,"column":255}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":1,"column":260}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":26,"column":18},"generated":{"line":1,"column":274}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":26,"column":19},"generated":{"line":1,"column":275}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":26,"column":27},"generated":{"line":1,"column":282}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":290}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":296}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":31,"column":21},"generated":{"line":1,"column":298}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":31,"column":32},"generated":{"line":1,"column":300}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":32,"column":9},"generated":{"line":1,"column":303}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":32,"column":9},"generated":{"line":1,"column":308}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":32,"column":23},"generated":{"line":1,"column":320}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":34,"column":10},"generated":{"line":1,"column":322}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":34,"column":10},"generated":{"line":1,"column":328}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":35,"column":8},"generated":{"line":1,"column":330}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":35,"column":27},"generated":{"line":1,"column":341}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":35,"column":32},"generated":{"line":1,"column":346}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":35,"column":49},"generated":{"line":1,"column":361}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":35,"column":54},"generated":{"line":1,"column":366}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":36,"column":10},"generated":{"line":1,"column":371}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":36,"column":30},"generated":{"line":1,"column":373}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":36,"column":43},"generated":{"line":1,"column":378}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":36,"column":58},"generated":{"line":1,"column":384}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":1,"column":390}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":1,"column":395}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":39,"column":41},"generated":{"line":1,"column":448}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":42,"column":10},"generated":{"line":1,"column":543}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":46,"column":50},"generated":{"line":1,"column":655}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":52,"column":30},"generated":{"line":1,"column":821}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":61,"column":57},"generated":{"line":1,"column":1177}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":1363}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":1371}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":23},"generated":{"line":1,"column":1382}}],"sources":{"../src/fft_gpu.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const COMPLEX_FFT = {\n  REAL: 'return real * expR - imag * expI;',\n  IMAG: 'return real * expI + imag * expR;'\n};\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, inputShape: [number, number], inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${op}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"2e0d5b32697814ea621c04aef84b852b","cacheData":{"env":{}}}